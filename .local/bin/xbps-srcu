#!/bin/bash
# ~/.local/bin/xbps-srcu

pkglistfile="$HOME/.local/share/package.list"
curDir=$(pwd)
verbose=false

if [[ "$1" == "-v" ]]; then
    verbose=true
    shift
fi

if [ ! -f "$pkglistfile" ]; then
    echo "Package list not found: $pkglistfile"
    exit 1
elif $verbose; then
    echo "Using packages:"
    cat "$pkglistfile"
    echo -e "\n"
fi

# For a clean output like the default
# xbps tools do it
run_step() {
    local msg="$1"
    shift
    if ! $verbose; then
	echo -ne "[ ] $msg ...\r"
    fi
    if $verbose; then
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi
    if ! $verbose; then
	if [ $? -eq 0 ]; then
            echo -e "[*] $msg ..."
	else
            echo -e "[!] $msg ..."
	    echo "Aborting ..."
	    exit 1
	fi
    fi
}

# Pull the updates for void-packages repo
# and run update-template for Brave
voidoldrev=$(git -C ~/Dokumente/Src/void-packages rev-parse HEAD)
run_step "Fetching void-packages repository updates" bash -c '
    git -C ~/Dokumente/Src/void-packages pull
'
voidnewrev=$(git -C ~/Dokumente/Src/void-packages rev-parse HEAD)

# Check if folder/package X has an update
check_pkg_updated() {
    local pkg="$1"
    git -C ~/Dokumente/Src/void-packages diff --name-only "$voidoldrev" "$voidnewrev" | grep -q "^srcpkgs/$pkg/"
}

# Iterate the packages and check them
changed_pkgs=()
while IFS= read -r pkg; do
    [[ -z "$pkg" || "$pkg" =~ ^# ]] && continue

    if [[ "$pkg" =~ ^custom:(.+) ]]; then
        realpkg="${BASH_REMATCH[1]}"
        repo_dir="~/Dokumente/Src/void-packages/srcpkgs/$realpkg"

        oldrev=$(git -C "$HOME/Dokumente/Src/void-packages/srcpkgs/$realpkg" rev-parse HEAD)
        run_step "Fetching $realpkg updates" bash -c "
            git -C $HOME/Dokumente/Src/void-packages/srcpkgs/$realpkg pull
        "
        newrev=$(git -C "$HOME/Dokumente/Src/void-packages/srcpkgs/$realpkg" rev-parse HEAD)

        if [ "$oldrev" != "$newrev" ]; then
            changed_pkgs+=("$realpkg")
        elif $verbose; then
            echo "$realpkg unchanged."
        fi

    else
        if check_pkg_updated "$pkg"; then
            changed_pkgs+=("$pkg")
        elif $verbose; then
            echo "$pkg unchanged."
        fi
    fi
done < "$pkglistfile"

# Exit here if there are no updates available
if [ ${#changed_pkgs[@]} -eq 0 ]; then
    echo -e "\t=> Everything is allready up to date. Exit."
    exit 0
fi

# Build the packages to run update with
# xbps-install -Su
run_step "Updating xbps packages" bash -c "
    cd ~/Dokumente/Src/void-packages &&
    ./xbps-src pkg ${changed_pkgs[*]}
"

# Clean everything up and in any case
# go back to dir where we started
run_step "Cleaning up" bash -c '
    cd ~/Dokumente/Src/void-packages &&
    ./xbps-src clean
'
cd "$curDir"
